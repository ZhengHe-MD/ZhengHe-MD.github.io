<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhengHe</title>
  <icon>https://zhenghe-md.github.io/icon.png</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://zhenghe-md.github.io/"/>
  <updated>2020-03-10T02:04:36.063Z</updated>
  <id>https://zhenghe-md.github.io/</id>
  
  <author>
    <name>ZhengHe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scaling Memcache at Facebook (2013)</title>
    <link href="https://zhenghe-md.github.io/2020/03/08/Scaling-Memcache-at-Facebook-2013/"/>
    <id>https://zhenghe-md.github.io/2020/03/08/Scaling-Memcache-at-Facebook-2013/</id>
    <published>2020-03-08T16:40:55.000Z</published>
    <updated>2020-03-10T02:04:36.063Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本文介绍 FB 基础团队以 memcached 为基本单元，构建服务于全世界的缓存层的最佳实践，全文递进式地分别讲述&lt;strong&gt;单集群 (Single Front-end Cluster)&lt;/strong&gt;、&lt;strong&gt;多集群 (Multiple
        
      
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/categories/papers-we-love/"/>
    
    
      <category term="distributed system" scheme="https://zhenghe-md.github.io/tags/distributed-system/"/>
    
      <category term="kv" scheme="https://zhenghe-md.github.io/tags/kv/"/>
    
      <category term="cache" scheme="https://zhenghe-md.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>The Evolution of Prometheus Storage Layer</title>
    <link href="https://zhenghe-md.github.io/2020/02/27/The-Evolution-of-Prometheus-Storage-Layer/"/>
    <id>https://zhenghe-md.github.io/2020/02/27/The-Evolution-of-Prometheus-Storage-Layer/</id>
    <published>2020-02-27T09:50:01.000Z</published>
    <updated>2020-03-10T02:04:36.067Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Prometheus 是当下最流行的监控平台之一，它的主要职责是从各个目标节点中采集监控数据，后持久化到本地的时序数据库中，并向外部提供便捷的查询接口。本文尝试探讨 Prometheus 存储层的演进过程，信息源主要来自于 Prometheus 团队在历届
        
      
    
    </summary>
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/categories/system-design/"/>
    
    
      <category term="tsdb" scheme="https://zhenghe-md.github.io/tags/tsdb/"/>
    
  </entry>
  
  <entry>
    <title>Log Structured Merge (LSM) Tree &amp; Usages in KV Stores</title>
    <link href="https://zhenghe-md.github.io/2020/02/26/Log-Structured-Merge-LSM-Tree-Usages-in-KV-Stores/"/>
    <id>https://zhenghe-md.github.io/2020/02/26/Log-Structured-Merge-LSM-Tree-Usages-in-KV-Stores/</id>
    <published>2020-02-26T23:23:03.000Z</published>
    <updated>2020-03-10T02:04:36.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本文转自我个人的 &lt;a href=&quot;https://zhenghe.gitbook.io/open-courses/database-design/log-structured-merge-lsm-tree-and-usages-in-kv-stores&quot;
        
      
    
    </summary>
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/categories/system-design/"/>
    
    
      <category term="data structures &amp; algorithms" scheme="https://zhenghe-md.github.io/tags/data-structures-algorithms/"/>
    
      <category term="kv" scheme="https://zhenghe-md.github.io/tags/kv/"/>
    
  </entry>
  
  <entry>
    <title>Cache Policies</title>
    <link href="https://zhenghe-md.github.io/2020/02/19/Cache-Policies/"/>
    <id>https://zhenghe-md.github.io/2020/02/19/Cache-Policies/</id>
    <published>2020-02-19T23:17:10.000Z</published>
    <updated>2020-03-10T02:04:36.051Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在计算机系统设计实践中，我们常常会遇到下图所示架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2020/02/19/Cache-Policies/coherence.jpg&quot;
        
      
    
    </summary>
    
    
      <category term="system design" scheme="https://zhenghe-md.github.io/categories/system-design/"/>
    
    
  </entry>
  
  <entry>
    <title>Consistent Hashing and Random Trees (1997)</title>
    <link href="https://zhenghe-md.github.io/2020/02/18/Consistent-Hashing-and-Random-Trees-1997/"/>
    <id>https://zhenghe-md.github.io/2020/02/18/Consistent-Hashing-and-Random-Trees-1997/</id>
    <published>2020-02-18T17:33:21.000Z</published>
    <updated>2020-03-10T02:04:36.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;论文作者的贡献主要包含两部分：Consistent Hashing 和 Random Trees。Consistent Hashing 主要用于解决分布式哈希表 (Distributed Hash Table, DHT) 的桶增减带来的重新哈希问题；Random
        
      
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/categories/papers-we-love/"/>
    
    
      <category term="data structures &amp; algorithms" scheme="https://zhenghe-md.github.io/tags/data-structures-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Hash Tables (1988)</title>
    <link href="https://zhenghe-md.github.io/2020/02/18/Dynamic-Hash-Tables-1988/"/>
    <id>https://zhenghe-md.github.io/2020/02/18/Dynamic-Hash-Tables-1988/</id>
    <published>2020-02-18T12:36:49.000Z</published>
    <updated>2020-03-10T02:04:36.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;
&lt;p&gt;Linear Hashing 和 Spiral Storage 是两种动态哈希算法。这两种算法最初都是为了优化外部存储 (secondary/external storage)
        
      
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/categories/papers-we-love/"/>
    
    
      <category term="data structures &amp; algorithms" scheme="https://zhenghe-md.github.io/tags/data-structures-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>LFU Implementation With O(1) Complexity (2010)</title>
    <link href="https://zhenghe-md.github.io/2020/02/17/LFU-Implementation-With-O-1-Complexity-2010/"/>
    <id>https://zhenghe-md.github.io/2020/02/17/LFU-Implementation-With-O-1-Complexity-2010/</id>
    <published>2020-02-17T18:27:16.000Z</published>
    <updated>2020-03-10T02:04:36.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;缓存置换算法 (Cache Eviction Algorithm) 在操作系统、数据库以及其它系统中被广泛用于缓存置换模块，当缓存空间不足时，它利用局部性原理 (Principle of Locality)
        
      
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/categories/papers-we-love/"/>
    
    
      <category term="data structures &amp; algorithms" scheme="https://zhenghe-md.github.io/tags/data-structures-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Time, Clocks, and the Ordering of Events in a Distributed System (1978)</title>
    <link href="https://zhenghe-md.github.io/2020/02/17/Time-Clocks-and-the-Ordering-of-Events-in-a-Distributed-System-1978/"/>
    <id>https://zhenghe-md.github.io/2020/02/17/Time-Clocks-and-the-Ordering-of-Events-in-a-Distributed-System-1978/</id>
    <published>2020-02-17T18:25:14.000Z</published>
    <updated>2020-03-10T02:04:36.071Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;本文是分布式系统理论的开山鼻祖、2013 年图灵奖获得者 Lamport 的成名作，也是分布式计算领域杰出论文最佳影响力奖 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dijkstra_Prize&quot;
        
      
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/categories/papers-we-love/"/>
    
    
      <category term="distributed system" scheme="https://zhenghe-md.github.io/tags/distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>Dapper, a Large-Scale Distributed Systems Tracing Infrastructure (2010)</title>
    <link href="https://zhenghe-md.github.io/2020/02/17/Dapper-a-Large-Scale-Distributed-Systems-Tracing-Infrastructure-2010/"/>
    <id>https://zhenghe-md.github.io/2020/02/17/Dapper-a-Large-Scale-Distributed-Systems-Tracing-Infrastructure-2010/</id>
    <published>2020-02-17T18:16:20.000Z</published>
    <updated>2020-03-10T02:04:36.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;早在 2008 年，Google 就已开始分布式调用链追踪的工作，经过两年的打磨后，Dapper 系统问世，并通过这篇文章将其设计公之于众。遗憾的是，Dapper 并不是开源项目，但它的设计理念依然深刻影响到后来的 Jaeger、Zipkin
        
      
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/categories/papers-we-love/"/>
    
    
      <category term="tracing" scheme="https://zhenghe-md.github.io/tags/tracing/"/>
    
  </entry>
  
  <entry>
    <title>Gorilla: A Fast, Scalable, In-Memory Time Series Database (2015)</title>
    <link href="https://zhenghe-md.github.io/2020/02/16/Gorilla-A-Fast-Scalable-In-Memory-Time-Series-Database-2015/"/>
    <id>https://zhenghe-md.github.io/2020/02/16/Gorilla-A-Fast-Scalable-In-Memory-Time-Series-Database-2015/</id>
    <published>2020-02-16T22:46:29.000Z</published>
    <updated>2020-03-10T02:04:36.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;在大型微服务架构中，服务监控和实时分析需要大量的时序数据。存储这些时序数据最高效的方案就是使用时序数据库 (TSDB)。设计时序数据库的重要挑战之一便是在效率、扩展性和可靠性中找到平衡。这篇论文介绍的是
        
      
    
    </summary>
    
    
      <category term="papers-we-love" scheme="https://zhenghe-md.github.io/categories/papers-we-love/"/>
    
    
      <category term="tsdb" scheme="https://zhenghe-md.github.io/tags/tsdb/"/>
    
  </entry>
  
</feed>
